<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tricky42</title>
    <link>https://www.bucksteeg.de/post/index.xml</link>
    <description>Recent content in Posts on tricky42</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017, Andreas Bucksteeg; all rights reserved.</copyright>
    <lastBuildDate>Fri, 20 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.bucksteeg.de/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Publishing the blog!</title>
      <link>https://www.bucksteeg.de/post/publishing-the-blog/</link>
      <pubDate>Fri, 20 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.bucksteeg.de/post/publishing-the-blog/</guid>
      <description>

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;https://www.bucksteeg.de/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;https://www.bucksteeg.de/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;https://www.bucksteeg.de/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;

&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;

&lt;h3 id=&#34;fix-content&#34;&gt;Fix content&lt;/h3&gt;

&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server --watch&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example-in-a-diff&#34;&gt;A practical example in a diff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up the blog!</title>
      <link>https://www.bucksteeg.de/post/setting-up-the-blog/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.bucksteeg.de/post/setting-up-the-blog/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In this post I describe my journey to find a neat, small solution to finally setup a small webpage and blog solution for my self. I start first to look for a small CMS solution but all the PHP based solution reminded me that a) I dont like PHP and b) I wanted to also make sure, the resulting site is easy and cheap to host. Therefore I quickly refined my requirements to static site generators and as I want to make more use of Golang, I looked for a Go based solution. I very quickly found Hugo (&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;) and started reading about it and decided to give it a try ;)&lt;/p&gt;

&lt;h1 id=&#34;installing-hugo&#34;&gt;Installing Hugo&lt;/h1&gt;

&lt;p&gt;The nice thing about Golang based solutions is that they are almost always are super easy to install. But even better, Hugo can be installed using Homebrew. In this post I will only cover all the steps which are needed to get Hugo setup on my Mac with Homebrew already installed. But I will include the links to the standard install documentation of Homebrew, Hugo and any other tool I am using in the link section.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew update &amp;amp;&amp;amp; brew install hugo
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/hugo-0.18.1.sierra.bottle.tar.gz
==&amp;gt; Pouring hugo-0.18.1.sierra.bottle.tar.gz
==&amp;gt; Caveats
Bash completion has been installed to:
  /usr/local/etc/bash_completion.d
==&amp;gt; Summary
🍺  /usr/local/Cellar/hugo/0.18.1: 32 files, 16.3M 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installation even worked on the bus from Phnom Penh to Ho Chi Minh City. Now we have everything to get started with Hugo.
So lets quickly test the installation by printing out the Hugo version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo version
Hugo Static Site Generator v0.18.1 BuildDate: 2016-12-30T00:12:41+07:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order the create a new site in Hugo you only have to type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site hugo-site
Congratulations! Your new Hugo site is created in &amp;lt;your path&amp;gt;

Just a few more steps and you&#39;re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/, or
   create your own with the &amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot; command.
2. Perhaps you want to add some content. You can add single files
   with &amp;quot;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;quot;.
3. Start the built-in live server via &amp;quot;hugo server&amp;quot;.

Visit https://gohugo.io/ for quickstart guide and full documentation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo creates a basic site skeleton in a new directory with the name of the site you have chosen, in my example &amp;ldquo;hugo-site&amp;rdquo;. Lets take a quick look on what has been created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
├── archetypes
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will not go into the details, the &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Quickstart Guide&lt;/a&gt; does a really good job, I will foucs just on the things necessary for my own site. You manage all the configuration of your site in the config.toml file. At first I was a bit irritated by the file extension. So I quickly googled TOML and after reading &lt;a href=&#34;https://npf.io/2014/08/intro-to-toml/&#34;&gt;Intro into TOML&lt;/a&gt; I kind of agree as I never enjoyed writing neither JSON nor YAML, so I am in full support for TOML ;)&lt;/p&gt;

&lt;h2 id=&#34;picking-a-theme&#34;&gt;Picking a theme&lt;/h2&gt;

&lt;p&gt;All static site generators have some kind of theme mechanism to make it easy to render your content in different layouts. Hugo is no exception so I took a tour on their &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo THemes Overview&lt;/a&gt;. As I am not a designer / html/css guru, I decided to go with a simplistic theme to make it easy later on to customize it later on with the support of some of my designer friends back home. I decided on using the &lt;a href=&#34;http://themes.gohugo.io/bootstrap/&#34;&gt;Hugo Bootstrap&lt;/a&gt;. I &lt;a href=&#34;https://github.com/tricky42/hugo-bootstrap&#34;&gt;forked&lt;/a&gt; it, as I wanted to track any changes I will do over time and potentially to contribute back. In order to use a theme you clone it into the themes directory and configure it in the config.toml file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd themes
$ git clone https://github.com/tricky42/hugo-bootstrap
Cloning into &#39;hugo-bootstrap&#39;...
remote: Counting objects: 522, done.
remote: Total 522 (delta 0), reused 0 (delta 0), pack-reused 522
Receiving objects: 100% (522/522), 2.27 MiB | 183.00 KiB/s, done.
Resolving deltas: 100% (204/204), done.
$ cd ..
$ echo &#39;theme = &amp;quot;hugo-bootstrap&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;echo &#39;theme = &amp;quot;hugo-bootstrap&amp;quot;&#39; &amp;gt;&amp;gt; config.toml&lt;/code&gt; just adds the config line &lt;code&gt;theme = &amp;quot;hugo-bootstrap&lt;/code&gt; to the &lt;code&gt;config.toml&lt;/code&gt; to configure that &lt;code&gt;hugo-bootstrap&lt;/code&gt; is used for rendering from now on. Each theme can bring it&amp;rsquo;s own configuration parameters and you normmally will find an example configuration file in the &lt;code&gt;exampleSite&lt;/code&gt; directory inside of the directory of the theme you are using.&lt;/p&gt;

&lt;p&gt;Now everything is setup, lets start Hugo to get the content gnerated and take a look.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -v server &amp;amp;
$ open http://localhost:1313
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By starting Hugo with the verbose flag &lt;code&gt;-v&lt;/code&gt; it&amp;rsquo;s a bit more chatty which is helpful in the begining or for debugging. The server command starts Hugo in server mode which is intended to local development. In server mode Hugo watches your site directory for changes and automatically regenerates your site when needed.&lt;/p&gt;

&lt;p&gt;After executing &lt;code&gt;$ open http://localhost:1313&lt;/code&gt; a browser window should open and display our generated site. As we haven&amp;rsquo;t so far added a &amp;hellip;&amp;hellip;&amp;hellip;.&lt;/p&gt;

&lt;p&gt;We can easily add a new blog post by &lt;code&gt;hugo new post/my-first-post.md&lt;/code&gt;. Hugo creates in the &lt;code&gt;&amp;lt;hugo-dir&amp;gt;/content/post&lt;/code&gt; an draft markdown file in which only a few, preconfigured frontmatter variables are included. You can start modifying this file &lt;code&gt;subl content/post/my-first-post.md&lt;/code&gt; and in parallel check you browser to check on your changes. In the background Hugo (because we started it in server mode) will generate the content whenever we modify a file.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;As we are almost in Ho Chi Minh City and we have a working local setup and can check our site in our browser I think it is a good time to end this first blog post ;) The next blog post will be about how to host the generated site cheap &amp;amp; performat.&lt;/p&gt;

&lt;p&gt;For convenience you cab find a shell script with all the used commands in my git repo ### LINK ####.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>my first post</title>
      <link>https://www.bucksteeg.de/post/my-first-post/</link>
      <pubDate>Sat, 07 Jan 2017 18:49:21 +0700</pubDate>
      
      <guid>https://www.bucksteeg.de/post/my-first-post/</guid>
      <description>

&lt;h1 id=&#34;ola-my-first-post&#34;&gt;Ola my first post&lt;/h1&gt;

&lt;p&gt;tadam tadam tadam tadamtadam tadamtadam tadamtadam tadamtadam tadamtadam tadam&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome!</title>
      <link>https://www.bucksteeg.de/post/welcome/</link>
      <pubDate>Sun, 01 Jan 2017 23:12:02 +0700</pubDate>
      
      <guid>https://www.bucksteeg.de/post/welcome/</guid>
      <description>

&lt;p&gt;Hugo is written in Go with support for multiple platforms.&lt;/p&gt;

&lt;p&gt;The latest release can be found at Hugo Releases. We currently provide pre-built binaries for  Windows,  Linux,  FreeBSD and  OS X (Darwin) for x64, i386 and ARM architectures.&lt;/p&gt;

&lt;p&gt;Hugo may also be compiled from source wherever the Go compiler tool chain can run, e.g. for other operating systems including DragonFly BSD, OpenBSD, Plan 9 and Solaris. See &lt;a href=&#34;http://golang.org/doc/install/source&#34;&gt;http://golang.org/doc/install/source&lt;/a&gt; for the full set of supported combinations of target operating systems and compilation architectures.&lt;/p&gt;

&lt;h1 id=&#34;installing-hugo-binary&#34;&gt;Installing Hugo (binary)&lt;/h1&gt;

&lt;p&gt;Installation is very easy. Simply download the appropriate version for your platform from Hugo Releases. Once downloaded it can be run from anywhere. You don’t need to install it into a global location. This works well for shared hosts and other systems where you don’t have a privileged account.&lt;/p&gt;

&lt;p&gt;Ideally, you should install it somewhere in your PATH for easy use. /usr/local/bin is the most probable location.&lt;/p&gt;

&lt;p&gt;On OS X, if you have Homebrew, installation is even easier: just run brew update &amp;amp;&amp;amp; brew install hugo.&lt;/p&gt;

&lt;p&gt;For a more detailed explanation follow the corresponding installation guides:&lt;/p&gt;

&lt;p&gt;Installation on OS X
Installation on Windows
Installing Pygments (optional)&lt;/p&gt;

&lt;p&gt;The Hugo executable has one optional external dependency for source code highlighting (Pygments).&lt;/p&gt;

&lt;p&gt;If you want to have source code highlighting using the highlight shortcode, you need to install the Python-based Pygments program. The procedure is outlined on the Pygments home page.&lt;/p&gt;

&lt;p&gt;Upgrading Hugo&lt;/p&gt;

&lt;p&gt;Upgrading Hugo is as easy as downloading and replacing the executable you’ve placed in your PATH.&lt;/p&gt;

&lt;p&gt;Installing from source&lt;/p&gt;

&lt;p&gt;Prerequisite tools for downloading and building source code&lt;/p&gt;

&lt;p&gt;Git
Go 1.5+
Get directly from GitHub&lt;/p&gt;

&lt;p&gt;$ export GOPATH=$HOME/go
$ go get -v github.com/spf13/hugo
go get will then fetch Hugo and all its dependent libraries to your $GOPATH/src directory, and compile everything into the final hugo (or hugo.exe) executable, which you will find sitting in the $GOPATH/bin/ directory, all ready to go!&lt;/p&gt;

&lt;p&gt;You may run go get with the -u option to update Hugo’s dependencies:&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>